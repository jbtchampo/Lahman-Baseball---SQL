-- Lahman Baseball Project

-- lets visualize the data first

SELECT *
FROM people;

SELECT * 
FROM appearances;

Q.1 What range of years for baseball games played does the provided database cover? --count 146 distinct years

SELECT MIN(yearid) AS start, MAX(yearid) AS end
FROM teams;

--- From 1871 to 2016

Q.2 Find the name and height of the shortest player in the database. How many games did he play in? What is the name of the team for which he played?

SELECT namelast, namefirst, height, appearances.g_all as games_played, appearances.teamid as team
FROM people
INNER JOIN appearances
ON people.playerid = appearances.playerid
WHERE height IS NOT null
ORDER BY height
LIMIT 1;

--- Eddie Gaedel, 43 in, 1 game played

Q.3

WITH top_sal AS (SELECT DISTINCT(sal.yearid), p.namegiven AS first, p.namelast AS last, s.schoolname AS college, sal.salary
	FROM people AS p
	INNER JOIN salaries AS sal
	USING (playerid)
	INNER JOIN collegeplaying AS c
	USING(playerid)
	INNER JOIN schools AS s
	USING (schoolid)
	WHERE schoolname iLIKE '%vanderbilt%'
	ORDER BY salary DESC)
SELECT first, last, college, SUM(salary) total_sal
FROM top_sal
GROUP BY first,last,college
ORDER BY total_sal DESC;

Another approach: 

SELECT concat(people.namefirst,' ', people.namelast) as player, CAST(SUM(salaries.salary::numeric) as money)
FROM collegeplaying
INNER JOIN schools on collegeplaying.schoolid = schools.schoolid
INNER JOIN people on people.playerid = collegeplaying.playerid
INNER JOIN salaries on people.playerid = salaries.playerid
WHERE schoolname LIKE 'Vanderbilt%'
GROUP BY player
ORDER BY sum DESC;

Q.4 Using the fielding table, group players into three groups based on their position: label players with position OF as "Outfield", those with position "SS", "1B", "2B", and "3B" as "Infield", and those with position "P" or "C" as "Battery". Determine the number of putouts made by each of these three groups in 2016.

WITH pc AS (SELECT playerid, pos, po, yearid,
		   CASE WHEN pos ILIKE '%of' THEN 'Outfield'
		   WHEN pos IN ('SS', '1B', '2B', '3B') THEN 'Infield'
		   WHEN pos IN ('P','C') THEN 'Battery' END AS pos_cat
		   FROM fielding)
SELECT pos_cat, SUM(po)
FROM pc
WHERE yearid = 2016
GROUP BY pos_cat;

Another approach:
SELECT
	CASE WHEN pos LIKE 'OF' THEN 'Outfield'
		WHEN pos LIKE 'C' THEN 'Battery'
		WHEN pos LIKE 'P' THEN 'Battery'
		ELSE 'Infield' END AS fielding_group,
	SUM(po) AS putouts
FROM fielding
WHERE yearid = 2016
GROUP BY fielding_group;


Q.5

WITH avg_so_dec AS (SELECT AVG(so) AS avg_year,yearid, FLOOR(yearid/10)*10 AS decade
					FROM batting
					WHERE yearid >= 1920
					GROUP BY yearid
					ORDER BY yearid)
SELECT ROUND(AVG(avg_year),2), decade
FROM avg_so_dec
GROUP BY decade;

Q.6

SELECT concat(people.namefirst,' ', people.namelast) as player, ROUND((SB::decimal/(SB+CS)::decimal)*100) as sb_success
FROM batting
INNER JOIN people on people.playerid = batting.playerid
WHERE yearid = 2016
AND (SB+CS)>20
ORDER BY sb_success DESC;

WITH batting AS (SELECT playerid, 
				 SUM(sb) AS stolen_bases, 
				 SUM(cs) AS caught_stealing, 
				 SUM(sb) + SUM(cs) AS total_attempts,
				 yearid AS year
				 FROM batting
				 GROUP BY playerid, yearid)
SELECT DISTINCT(CONCAT(namelast, ',', ' ', namefirst)) AS player_name,
	   SUM(total_attempts) AS total_attempts,
	   SUM(stolen_bases) AS stolen_success,
	   ROUND(SUM(stolen_bases::DECIMAL/total_attempts::DECIMAL)*100, 2) AS success_rate
FROM batting
JOIN people ON batting.playerid = people.playerid
WHERE total_attempts >= 20
	AND total_attempts IS NOT NULL
	AND stolen_bases IS NOT NULL
	AND year = '2016'
GROUP BY people.playerid
ORDER BY success_rate DESC;


Q.7

WITH rank_wins AS (SELECT yearid, teamid, w, RANK() OVER(PARTITION BY yearid ORDER BY w DESC) AS tm_rank, wswin
		FROM teams
		WHERE yearid >= 1970
		AND yearid <= 2016
		AND yearid <> 1981)
SELECT *
FROM rank_wins
WHERE  tm_rank = 1
	AND wswin IS NOT NULL

Q.8

SELECT park, team, attendance/games AS avg_attendance
FROM homegames
WHERE year = 2016
AND games >=10
ORDER BY avg_attendance
LIMIT 5; 

Q.9

WITH manager_both AS (SELECT playerid, al.lgid AS al_lg, nl.lgid AS nl_lg,
					  al.yearid AS al_year, nl.yearid AS nl_year,
					  al.awardid AS al_award, nl.awardid AS nl_award
	FROM awardsmanagers AS al INNER JOIN awardsmanagers AS nl
	USING(playerid)
	WHERE al.awardid LIKE 'TSN%'
	AND nl.awardid LIKE 'TSN%'
	AND al.lgid LIKE 'AL'
	AND nl.lgid LIKE 'NL')
	
SELECT DISTINCT(people.playerid), namefirst, namelast, managers.teamid,
		managers.yearid AS year, managers.lgid
FROM manager_both AS mb LEFT JOIN people USING(playerid)
LEFT JOIN salaries USING(playerid)
LEFT JOIN managers USING(playerid)
WHERE managers.yearid = al_year OR managers.yearid = nl_year;



Bonus 1:

WITH tn_colleges AS (SELECT schoolid,
					schoolname,
					schoolstate
					FROM schools
					WHERE schoolstate = 'TN'
					GROUP BY schoolid)
SELECT DISTINCT schoolname AS college,
	   AVG(salary)::TEXT::NUMERIC::MONEY AS avg_salary
FROM tn_colleges
JOIN collegeplaying ON tn_colleges.schoolid = collegeplaying.schoolid
JOIN people ON collegeplaying.playerid = people.playerid
JOIN salaries ON people.playerid = salaries.playerid
GROUP BY schoolname
ORDER BY avg_salary DESC; 
